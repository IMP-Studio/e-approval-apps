// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/leave_model.dart';
import 'models/national_leave_model.dart';
import 'models/notification_model.dart';
import 'models/presence_model.dart';
import 'models/profile_model.dart';
import 'models/project_model.dart';
import 'models/standup_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(3, 7829124370941411776),
      name: 'Projects',
      lastPropertyId: const IdUid(13, 6861028504478385509),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2973741357827494792),
            name: 'id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 4077128271825862462),
            name: 'partnerId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5706385730118196458),
            name: 'project',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4694461227321913693),
            name: 'partner',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3755577037676732910),
            name: 'partnerLogo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6525716554866044945),
            name: 'partnerDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7661748495676033730),
            name: 'startDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5772996485236626918),
            name: 'endDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6898454739631437198),
            name: 'durasi',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4868418658603049394),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3219457924076088542),
            name: 'createdAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2290675464550019514),
            name: 'updatedAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6861028504478385509),
            name: 'serverId',
            type: 6,
            flags: 129)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 5709829485113098503),
      name: 'Presences',
      lastPropertyId: const IdUid(34, 5570551887660328604),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4793096741917165783),
            name: 'id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 8092881330598769958),
            name: 'userId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1923465369861786926),
            name: 'namaLengkap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1255630808042779880),
            name: 'posisi',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5091813510710227874),
            name: 'permission',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1969751247079827742),
            name: 'category',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 841502702884941939),
            name: 'entryTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4171895464154541995),
            name: 'exitTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4812825306389034520),
            name: 'date',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5301571575019721021),
            name: 'latitude',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5256130869711925333),
            name: 'longitude',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 747704623287317205),
            name: 'emergencyDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5369421851309571063),
            name: 'createdAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 3905866946457965598),
            name: 'updatedAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 2870644999258739983),
            name: 'file',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 4535045450539343007),
            name: 'originalFile',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2200148164195465029),
            name: 'startDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 7531024713451905345),
            name: 'endDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 8057525911150928),
            name: 'entryDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 1431744568586638332),
            name: 'facePoint',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 2989835661292022422),
            name: 'statusCommitId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 7716521861987738173),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 8106291010336553216),
            name: 'statusDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 2745466864663715624),
            name: 'categoryDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 3903752868463359808),
            name: 'teleworkCategory',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 4652648800832120023),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 2880866820066693746),
            name: 'descriptionLeave',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 7326257020706750879),
            name: 'submissionDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 2995676430200190605),
            name: 'totalLeaveDays',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 6562694211494653874),
            name: 'substituteId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 8313092728161132963),
            name: 'substituteName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 1393008990991637626),
            name: 'substituteDivision',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 5004142608273185763),
            name: 'substitutePosition',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 5570551887660328604),
            name: 'serverId',
            type: 6,
            flags: 129)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 6906738950483851352),
            name: 'standupFR',
            targetId: const IdUid(5, 3447564331827907237))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 3447564331827907237),
      name: 'StandUps',
      lastPropertyId: const IdUid(16, 2159720886677540639),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2122821375591388232),
            name: 'id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 1357946057029326782),
            name: 'userId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2834844911037339106),
            name: 'namaLengkap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8044448535755352713),
            name: 'prensenceId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2166216447201887279),
            name: 'prensenceCategory',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3465479747270707969),
            name: 'projectId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6647170919844984074),
            name: 'project',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8633144477835622513),
            name: 'partner',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1053366939062216074),
            name: 'done',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1257747405296433588),
            name: 'doing',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4576773828420343047),
            name: 'jam',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 9194714192572787721),
            name: 'blocker',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5818150676901699361),
            name: 'createdAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 5604935136249327424),
            name: 'updatedAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 641896483161521615),
            name: 'presenceFRId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 6712574827080867299),
            relationTarget: 'Presences'),
        ModelProperty(
            id: const IdUid(16, 2159720886677540639),
            name: 'serverId',
            type: 6,
            flags: 129)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 7264545097860474340),
      name: 'Leaves',
      lastPropertyId: const IdUid(27, 5774204651724297442),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2018004305559058591),
            name: 'id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 8552077662234427701),
            name: 'userId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 339440885579908779),
            name: 'substituteId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2153139549095553914),
            name: 'substituteName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7825559193886779681),
            name: 'substituteDivision',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 489990270522178429),
            name: 'substitutePosition',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1931841251930820704),
            name: 'namaLengkap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 533586994677550629),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7074922867270772015),
            name: 'leaveDetailId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2987779603093204581),
            name: 'descriptionLeave',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 1596427638092982859),
            name: 'entryTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 6406791093512416943),
            name: 'category',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 1339063942978983467),
            name: 'posisi',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 2149533955702373766),
            name: 'submissionDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 4251505484728731781),
            name: 'startDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 1919650666436531309),
            name: 'endDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 7344499369239415077),
            name: 'entryDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 4836992197750789204),
            name: 'totalLeaveDays',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 1918144669328847212),
            name: 'originalFile',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 1810722571436702415),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 907183332402092998),
            name: 'statusDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 5144711507346393767),
            name: 'approverId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 747157955904642583),
            name: 'approverName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 639290027748393803),
            name: 'createdAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 856454198608530735),
            name: 'updatedAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 1483245293215708745),
            name: 'serverId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(27, 5774204651724297442),
            name: 'file',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 638324693561890820),
      name: 'Profile',
      lastPropertyId: const IdUid(27, 7037055224130739375),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1657978876966888316),
            name: 'id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 4622680047096914592),
            name: 'userId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7177989411399383830),
            name: 'namaLengkap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3826605003035409493),
            name: 'divisi',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7674774246518304976),
            name: 'divisionId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7691791570918043446),
            name: 'posisi',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5463749411512096339),
            name: 'posisitionId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5072132669040063945),
            name: 'avatar',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 904860053229571315),
            name: 'idNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5450868373965150654),
            name: 'gender',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2064129739556870337),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 725313491746018420),
            name: 'birthDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2561455654797809969),
            name: 'isActive',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 1233690235522575860),
            name: 'permission',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 352416138405034704),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 1209283199467724729),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 1998309862291880990),
            name: 'emailVerifiedAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 8441380246670580671),
            name: 'role',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 4283378048684203986),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 7781611207930310710),
            name: 'facepoint',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 5195851876893988828),
            name: 'rememberToken',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 3081180519347325893),
            name: 'doneCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 5402429910787835412),
            name: 'doingCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 527226512951472011),
            name: 'blockerCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 4816012274857528631),
            name: 'createdAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 6156663099734860434),
            name: 'updatedAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 7037055224130739375),
            name: 'serverId',
            type: 6,
            flags: 129)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 672913125204316388),
            name: 'standupFRs',
            targetId: const IdUid(5, 3447564331827907237))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 2450041176175030163),
      name: 'NationalLeaves',
      lastPropertyId: const IdUid(4, 6733025015433709703),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2993939422731510970),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1756850172530871682),
            name: 'holidayDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6577941145926313677),
            name: 'holidayName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6733025015433709703),
            name: 'isNationalHoliday',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 4696628877672266086),
      name: 'Notifications',
      lastPropertyId: const IdUid(56, 5047666160478927218),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6885501093685389351),
            name: 'androidAccentColor',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 9212443070861545397),
            name: 'appId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1095908106086988607),
            name: 'bigPicture',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 293308897674372565),
            name: 'canceled',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3340618986432079246),
            name: 'converted',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1991061668052561224),
            name: 'delayedOption',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1096077836986907467),
            name: 'errored',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 996992131495289764),
            name: 'failed',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6507920391869279928),
            name: 'globalImage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8365408506003094974),
            name: 'id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2754901662830747673),
            name: 'includePlayerIds',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 483282965826082735),
            name: 'isAdm',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6724809299582128522),
            name: 'isAndroid',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 3749209909819020960),
            name: 'isChrome',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 6208088662151372823),
            name: 'isChromeWeb',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 576426306085231107),
            name: 'isAlexa',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 3265467006994937084),
            name: 'isFirefox',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 5197249647844011900),
            name: 'isIos',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 3621735353334013449),
            name: 'isSafari',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 9193003082514561664),
            name: 'isWP',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 2938282340389701640),
            name: 'isWPWNS',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 2360335010713793475),
            name: 'isEdge',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 7157938350408669343),
            name: 'isHuawei',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 5217595281759711190),
            name: 'isSMS',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 3534507585397223090),
            name: 'largeIcon',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 3065946939870993164),
            name: 'priority',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 4478560615290219083),
            name: 'queuedAt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 741906101181657494),
            name: 'remaining',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 905088708456953251),
            name: 'sendAfter',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 4764930406215009538),
            name: 'completedAt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 2886636301431420438),
            name: 'smallIcon',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 4004202799951892256),
            name: 'successful',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 3821645751089496009),
            name: 'tags',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 3504333649070967191),
            name: 'filters',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 7921366369387417761),
            name: 'templateId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 2120321370655122919),
            name: 'ttl',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 4387093452307644022),
            name: 'url',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(38, 3195728144410324630),
            name: 'webUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(39, 6772038422478647516),
            name: 'appUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(40, 8137501967294327214),
            name: 'includeExternalUserIds',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(41, 475053805926535660),
            name: 'includeAliases',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(42, 5651897034816458208),
            name: 'fcapStatus',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(43, 4365124934860033349),
            name: 'smsFrom',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(44, 5272652392291358898),
            name: 'smsMediaUrls',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(45, 2994013467266148635),
            name: 'subtitle',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(46, 5122603629352214529),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(47, 8461868874800588878),
            name: 'emailClickTrackingDisabled',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(48, 8089749558783286801),
            name: 'isEmail',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(49, 4539886014083165702),
            name: 'emailSubject',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(50, 8716776857277678361),
            name: 'emailFromName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(51, 5816825882737334076),
            name: 'emailFromAddress',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(52, 8453284551845477092),
            name: 'emailPreheader',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(53, 1555495093400295444),
            name: 'emailReplyToAddress',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(54, 2854561095825740077),
            name: 'includeUnsubscribed',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(55, 5247869847197380189),
            name: 'threadId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(56, 5047666160478927218),
            name: 'serverId',
            type: 6,
            flags: 129)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(12, 4696628877672266086),
      lastIndexId: const IdUid(5, 6712574827080867299),
      lastRelationId: const IdUid(2, 672913125204316388),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        6130316900400702390,
        570805067087976729,
        761215203056397191,
        5813840121112059263,
        499253502756526266
      ],
      retiredIndexUids: const [
        4407119055099483574,
        5284691927560627503,
        8091820677204435685
      ],
      retiredPropertyUids: const [
        5575910842924033113,
        5291661157934379876,
        4474899501933438276,
        7119244892826310673,
        7350741200369036923,
        5801260243774758296,
        6640327793434641861,
        306921404502881214,
        9108702233274973524,
        8187342438214927313,
        4670084111051079409,
        5391404417045972593,
        1196092583008008468,
        5112281919631576345,
        7097152521528656225,
        5173813160917155786,
        6543573832670152971,
        5035658218511618880,
        2953147546710300119,
        277343328716281028,
        4351184492632334308,
        4723197954137245809,
        2850362329972996774,
        1105973418383445231,
        4108687617120357529,
        1054375424839964948,
        6524050193300076710,
        9005578135833122822,
        8535425579094288392,
        2437846619922652363,
        9016204259104895023,
        1232905040923501801,
        7334857011007520364,
        2019661340214438906,
        219471718533812295,
        3160800668481868576,
        2211025662694182942,
        7178174607161229617,
        7232614333457650502,
        839137595704995353,
        5630545579672625700,
        3991160329223951977,
        3631231075407156514,
        9137732474342423075,
        2964492312201974738,
        8071550093272530954,
        3859525509556199239,
        8461515375832646870,
        8908397656405328432,
        7863863329277401148,
        918123343763404486,
        4080558115708131359,
        8955816007107733981,
        3055997954047841080,
        3655553753465951756,
        545299715547354934,
        6723835538175103344,
        4027286042877662665,
        963005226085676154,
        1705175689397226922,
        501260024455257927,
        2262964890315251339,
        1003454306091021074,
        8876062551269627735,
        4851485470391153168,
        7800454804698016189,
        5749617338215995293,
        3767966724946778858,
        2181541122550289360,
        7438158008476812509,
        1984163322136926153,
        5929635313693087061,
        6717912870209478140,
        5389914885778483570,
        1352562662234058748,
        4604653056374006203,
        8258765220690332838,
        4609371955705519223,
        8764120372671487701,
        6838696960842603821,
        2417431482730559816,
        1337713487728885449,
        4920732128698833149,
        3173242730425556148,
        4919078095166214098,
        4979659526363679620,
        8746460451369186513,
        3463406434174525961,
        3066276906317681331,
        5850235133258758618,
        4134776404374260535,
        6757906645593843911,
        5898237631407490107,
        1924004895446692748,
        2989318420015624901,
        7143127823945113423,
        3283542735245338036,
        7636268802486781976,
        1725807164648612098,
        2668093526384090377,
        920973959940726771,
        4260650737311317492,
        1336862869914689509,
        2266182709020374479,
        6492335196975743034,
        6968604597055805460,
        5803179660685973344,
        8389712195263540500,
        4577435812329486568,
        8066108360765745365,
        4490931161933161720,
        6445423877923369408,
        337151105116277315,
        1658809419135878157,
        1423061867983171281,
        5995029542395479053,
        1824087525598434018,
        5180457232739941484,
        21425293888986391,
        6734046549731882197,
        25460985313876324,
        543744690275412927,
        4906228695751255535,
        8183454054729863111,
        4775154970951701792,
        837275126369083861,
        1524460049974133865,
        4997350960584978055,
        8824017551800509882,
        2465551686890159784,
        8396979995507654068,
        2551247098150937020,
        7530621704761430076,
        711637918740745127,
        4903091817268759875,
        170267625214840692,
        7234707928455855286,
        3864863410974565587,
        8579578314378922321,
        1300049347661974760,
        8815347747170359303,
        7167017000585688697,
        4008653547934647708,
        1669611973855977610,
        8573468139058060423,
        7122054397923407204,
        3284229658671559668,
        3554051892700006088,
        5578114657794800718,
        6314623232181674935,
        2993033537306724253,
        5954213759217338269,
        4581207776736400576,
        1039934313710198021,
        8417252874219778011,
        1129209676209748692,
        825590452238149181,
        9006477851118377960,
        2736071507477546168,
        6733228960588564088,
        6493966713063697450,
        6541535176959709900,
        1819195548749626227,
        170730600790505061,
        3938548790250571017
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Projects: EntityDefinition<Projects>(
        model: _entities[0],
        toOneRelations: (Projects object) => [],
        toManyRelations: (Projects object) => {},
        getId: (Projects object) => object.serverId,
        setId: (Projects object, int id) {
          object.serverId = id;
        },
        objectToFB: (Projects object, fb.Builder fbb) {
          final projectOffset =
              object.project == null ? null : fbb.writeString(object.project!);
          final partnerOffset =
              object.partner == null ? null : fbb.writeString(object.partner!);
          final partnerLogoOffset = object.partnerLogo == null
              ? null
              : fbb.writeString(object.partnerLogo!);
          final partnerDescriptionOffset = object.partnerDescription == null
              ? null
              : fbb.writeString(object.partnerDescription!);
          final startDateOffset = object.startDate == null
              ? null
              : fbb.writeString(object.startDate!);
          final endDateOffset =
              object.endDate == null ? null : fbb.writeString(object.endDate!);
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          final createdAtOffset = object.createdAt == null
              ? null
              : fbb.writeString(object.createdAt!);
          final updatedAtOffset = object.updatedAt == null
              ? null
              : fbb.writeString(object.updatedAt!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.partnerId);
          fbb.addOffset(2, projectOffset);
          fbb.addOffset(3, partnerOffset);
          fbb.addOffset(4, partnerLogoOffset);
          fbb.addOffset(5, partnerDescriptionOffset);
          fbb.addOffset(6, startDateOffset);
          fbb.addOffset(7, endDateOffset);
          fbb.addInt64(8, object.durasi);
          fbb.addOffset(9, statusOffset);
          fbb.addOffset(10, createdAtOffset);
          fbb.addOffset(11, updatedAtOffset);
          fbb.addInt64(12, object.serverId);
          fbb.finish(fbb.endTable());
          return object.serverId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final partnerIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final projectParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final partnerParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final partnerLogoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final partnerDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final startDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final endDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final durasiParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final createdAtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final updatedAtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final serverIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          final object = Projects(
              id: idParam,
              partnerId: partnerIdParam,
              project: projectParam,
              partner: partnerParam,
              partnerLogo: partnerLogoParam,
              partnerDescription: partnerDescriptionParam,
              startDate: startDateParam,
              endDate: endDateParam,
              durasi: durasiParam,
              status: statusParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              serverId: serverIdParam);

          return object;
        }),
    Presences: EntityDefinition<Presences>(
        model: _entities[1],
        toOneRelations: (Presences object) => [],
        toManyRelations: (Presences object) =>
            {RelInfo<Presences>.toMany(1, object.serverId): object.standupFR},
        getId: (Presences object) => object.serverId,
        setId: (Presences object, int id) {
          object.serverId = id;
        },
        objectToFB: (Presences object, fb.Builder fbb) {
          final namaLengkapOffset = object.namaLengkap == null
              ? null
              : fbb.writeString(object.namaLengkap!);
          final posisiOffset =
              object.posisi == null ? null : fbb.writeString(object.posisi!);
          final permissionOffset = object.permission == null
              ? null
              : fbb.writeList(object.permission!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final categoryOffset = object.category == null
              ? null
              : fbb.writeString(object.category!);
          final entryTimeOffset = object.entryTime == null
              ? null
              : fbb.writeString(object.entryTime!);
          final exitTimeOffset = object.exitTime == null
              ? null
              : fbb.writeString(object.exitTime!);
          final dateOffset =
              object.date == null ? null : fbb.writeString(object.date!);
          final latitudeOffset = object.latitude == null
              ? null
              : fbb.writeString(object.latitude!);
          final longitudeOffset = object.longitude == null
              ? null
              : fbb.writeString(object.longitude!);
          final emergencyDescriptionOffset = object.emergencyDescription == null
              ? null
              : fbb.writeString(object.emergencyDescription!);
          final createdAtOffset = object.createdAt == null
              ? null
              : fbb.writeString(object.createdAt!);
          final updatedAtOffset = object.updatedAt == null
              ? null
              : fbb.writeString(object.updatedAt!);
          final fileOffset =
              object.file == null ? null : fbb.writeString(object.file!);
          final originalFileOffset = object.originalFile == null
              ? null
              : fbb.writeString(object.originalFile!);
          final startDateOffset = object.startDate == null
              ? null
              : fbb.writeString(object.startDate!);
          final endDateOffset =
              object.endDate == null ? null : fbb.writeString(object.endDate!);
          final entryDateOffset = object.entryDate == null
              ? null
              : fbb.writeString(object.entryDate!);
          final facePointOffset = object.facePoint == null
              ? null
              : fbb.writeString(object.facePoint!);
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          final statusDescriptionOffset = object.statusDescription == null
              ? null
              : fbb.writeString(object.statusDescription!);
          final categoryDescriptionOffset = object.categoryDescription == null
              ? null
              : fbb.writeString(object.categoryDescription!);
          final teleworkCategoryOffset = object.teleworkCategory == null
              ? null
              : fbb.writeString(object.teleworkCategory!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final descriptionLeaveOffset = object.descriptionLeave == null
              ? null
              : fbb.writeString(object.descriptionLeave!);
          final submissionDateOffset = object.submissionDate == null
              ? null
              : fbb.writeString(object.submissionDate!);
          final totalLeaveDaysOffset = object.totalLeaveDays == null
              ? null
              : fbb.writeString(object.totalLeaveDays!);
          final substituteNameOffset = object.substituteName == null
              ? null
              : fbb.writeString(object.substituteName!);
          final substituteDivisionOffset = object.substituteDivision == null
              ? null
              : fbb.writeString(object.substituteDivision!);
          final substitutePositionOffset = object.substitutePosition == null
              ? null
              : fbb.writeString(object.substitutePosition!);
          fbb.startTable(35);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.userId);
          fbb.addOffset(2, namaLengkapOffset);
          fbb.addOffset(3, posisiOffset);
          fbb.addOffset(4, permissionOffset);
          fbb.addOffset(5, categoryOffset);
          fbb.addOffset(6, entryTimeOffset);
          fbb.addOffset(7, exitTimeOffset);
          fbb.addOffset(8, dateOffset);
          fbb.addOffset(9, latitudeOffset);
          fbb.addOffset(10, longitudeOffset);
          fbb.addOffset(11, emergencyDescriptionOffset);
          fbb.addOffset(12, createdAtOffset);
          fbb.addOffset(13, updatedAtOffset);
          fbb.addOffset(14, fileOffset);
          fbb.addOffset(15, originalFileOffset);
          fbb.addOffset(16, startDateOffset);
          fbb.addOffset(17, endDateOffset);
          fbb.addOffset(18, entryDateOffset);
          fbb.addOffset(19, facePointOffset);
          fbb.addInt64(20, object.statusCommitId);
          fbb.addOffset(21, statusOffset);
          fbb.addOffset(22, statusDescriptionOffset);
          fbb.addOffset(23, categoryDescriptionOffset);
          fbb.addOffset(24, teleworkCategoryOffset);
          fbb.addOffset(25, typeOffset);
          fbb.addOffset(26, descriptionLeaveOffset);
          fbb.addOffset(27, submissionDateOffset);
          fbb.addOffset(28, totalLeaveDaysOffset);
          fbb.addInt64(29, object.substituteId);
          fbb.addOffset(30, substituteNameOffset);
          fbb.addOffset(31, substituteDivisionOffset);
          fbb.addOffset(32, substitutePositionOffset);
          fbb.addInt64(33, object.serverId);
          fbb.finish(fbb.endTable());
          return object.serverId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final userIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final namaLengkapParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final posisiParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final permissionParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 12);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final entryTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final exitTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final dateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final latitudeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final longitudeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final emergencyDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final createdAtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final updatedAtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final fileParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final originalFileParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 34);
          final startDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 36);
          final endDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final entryDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 40);
          final facePointParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 42);
          final statusCommitIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 44);
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 46);
          final statusDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 48);
          final categoryDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 50);
          final teleworkCategoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 52);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 54);
          final descriptionLeaveParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 56);
          final submissionDateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 58);
          final totalLeaveDaysParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 60);
          final substituteIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 62);
          final substituteNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 64);
          final substituteDivisionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 66);
          final substitutePositionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 68);
          final serverIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 70, 0);
          final object = Presences(
              id: idParam,
              userId: userIdParam,
              namaLengkap: namaLengkapParam,
              posisi: posisiParam,
              permission: permissionParam,
              category: categoryParam,
              entryTime: entryTimeParam,
              exitTime: exitTimeParam,
              date: dateParam,
              latitude: latitudeParam,
              longitude: longitudeParam,
              emergencyDescription: emergencyDescriptionParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              file: fileParam,
              originalFile: originalFileParam,
              startDate: startDateParam,
              endDate: endDateParam,
              entryDate: entryDateParam,
              facePoint: facePointParam,
              statusCommitId: statusCommitIdParam,
              status: statusParam,
              statusDescription: statusDescriptionParam,
              categoryDescription: categoryDescriptionParam,
              teleworkCategory: teleworkCategoryParam,
              type: typeParam,
              descriptionLeave: descriptionLeaveParam,
              submissionDate: submissionDateParam,
              totalLeaveDays: totalLeaveDaysParam,
              substituteId: substituteIdParam,
              substituteName: substituteNameParam,
              substituteDivision: substituteDivisionParam,
              substitutePosition: substitutePositionParam,
              serverId: serverIdParam);
          InternalToManyAccess.setRelInfo<Presences>(object.standupFR, store,
              RelInfo<Presences>.toMany(1, object.serverId));
          return object;
        }),
    StandUps: EntityDefinition<StandUps>(
        model: _entities[2],
        toOneRelations: (StandUps object) => [object.presenceFR],
        toManyRelations: (StandUps object) => {},
        getId: (StandUps object) => object.serverId,
        setId: (StandUps object, int id) {
          object.serverId = id;
        },
        objectToFB: (StandUps object, fb.Builder fbb) {
          final namaLengkapOffset = object.namaLengkap == null
              ? null
              : fbb.writeString(object.namaLengkap!);
          final prensenceCategoryOffset = object.prensenceCategory == null
              ? null
              : fbb.writeString(object.prensenceCategory!);
          final projectOffset =
              object.project == null ? null : fbb.writeString(object.project!);
          final partnerOffset =
              object.partner == null ? null : fbb.writeString(object.partner!);
          final doneOffset =
              object.done == null ? null : fbb.writeString(object.done!);
          final doingOffset =
              object.doing == null ? null : fbb.writeString(object.doing!);
          final jamOffset =
              object.jam == null ? null : fbb.writeString(object.jam!);
          final blockerOffset =
              object.blocker == null ? null : fbb.writeString(object.blocker!);
          final createdAtOffset = object.createdAt == null
              ? null
              : fbb.writeString(object.createdAt!);
          final updatedAtOffset = object.updatedAt == null
              ? null
              : fbb.writeString(object.updatedAt!);
          fbb.startTable(17);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.userId);
          fbb.addOffset(2, namaLengkapOffset);
          fbb.addInt64(3, object.prensenceId);
          fbb.addOffset(4, prensenceCategoryOffset);
          fbb.addInt64(5, object.projectId);
          fbb.addOffset(6, projectOffset);
          fbb.addOffset(7, partnerOffset);
          fbb.addOffset(8, doneOffset);
          fbb.addOffset(9, doingOffset);
          fbb.addOffset(10, jamOffset);
          fbb.addOffset(11, blockerOffset);
          fbb.addOffset(12, createdAtOffset);
          fbb.addOffset(13, updatedAtOffset);
          fbb.addInt64(14, object.presenceFR.targetId);
          fbb.addInt64(15, object.serverId);
          fbb.finish(fbb.endTable());
          return object.serverId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final userIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final namaLengkapParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final prensenceIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final prensenceCategoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final projectIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final projectParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final partnerParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final doneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final doingParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final jamParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final blockerParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final createdAtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final updatedAtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final serverIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          final object = StandUps(
              id: idParam,
              userId: userIdParam,
              namaLengkap: namaLengkapParam,
              prensenceId: prensenceIdParam,
              prensenceCategory: prensenceCategoryParam,
              projectId: projectIdParam,
              project: projectParam,
              partner: partnerParam,
              done: doneParam,
              doing: doingParam,
              jam: jamParam,
              blocker: blockerParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              serverId: serverIdParam);
          object.presenceFR.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          object.presenceFR.attach(store);
          return object;
        }),
    Leaves: EntityDefinition<Leaves>(
        model: _entities[3],
        toOneRelations: (Leaves object) => [],
        toManyRelations: (Leaves object) => {},
        getId: (Leaves object) => object.serverId,
        setId: (Leaves object, int id) {
          object.serverId = id;
        },
        objectToFB: (Leaves object, fb.Builder fbb) {
          final substituteNameOffset = object.substituteName == null
              ? null
              : fbb.writeString(object.substituteName!);
          final substituteDivisionOffset = object.substituteDivision == null
              ? null
              : fbb.writeString(object.substituteDivision!);
          final substitutePositionOffset = object.substitutePosition == null
              ? null
              : fbb.writeString(object.substitutePosition!);
          final namaLengkapOffset = object.namaLengkap == null
              ? null
              : fbb.writeString(object.namaLengkap!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final descriptionLeaveOffset = object.descriptionLeave == null
              ? null
              : fbb.writeString(object.descriptionLeave!);
          final entryTimeOffset = object.entryTime == null
              ? null
              : fbb.writeString(object.entryTime!);
          final categoryOffset = object.category == null
              ? null
              : fbb.writeString(object.category!);
          final posisiOffset =
              object.posisi == null ? null : fbb.writeString(object.posisi!);
          final submissionDateOffset = object.submissionDate == null
              ? null
              : fbb.writeString(object.submissionDate!);
          final startDateOffset = object.startDate == null
              ? null
              : fbb.writeString(object.startDate!);
          final endDateOffset =
              object.endDate == null ? null : fbb.writeString(object.endDate!);
          final entryDateOffset = object.entryDate == null
              ? null
              : fbb.writeString(object.entryDate!);
          final totalLeaveDaysOffset = object.totalLeaveDays == null
              ? null
              : fbb.writeString(object.totalLeaveDays!);
          final originalFileOffset = object.originalFile == null
              ? null
              : fbb.writeString(object.originalFile!);
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          final statusDescriptionOffset = object.statusDescription == null
              ? null
              : fbb.writeString(object.statusDescription!);
          final approverNameOffset = object.approverName == null
              ? null
              : fbb.writeString(object.approverName!);
          final createdAtOffset = object.createdAt == null
              ? null
              : fbb.writeString(object.createdAt!);
          final updatedAtOffset = object.updatedAt == null
              ? null
              : fbb.writeString(object.updatedAt!);
          final fileOffset =
              object.file == null ? null : fbb.writeString(object.file!);
          fbb.startTable(28);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.userId);
          fbb.addInt64(2, object.substituteId);
          fbb.addOffset(3, substituteNameOffset);
          fbb.addOffset(4, substituteDivisionOffset);
          fbb.addOffset(5, substitutePositionOffset);
          fbb.addOffset(6, namaLengkapOffset);
          fbb.addOffset(7, typeOffset);
          fbb.addInt64(8, object.leaveDetailId);
          fbb.addOffset(9, descriptionLeaveOffset);
          fbb.addOffset(10, entryTimeOffset);
          fbb.addOffset(11, categoryOffset);
          fbb.addOffset(12, posisiOffset);
          fbb.addOffset(13, submissionDateOffset);
          fbb.addOffset(14, startDateOffset);
          fbb.addOffset(15, endDateOffset);
          fbb.addOffset(16, entryDateOffset);
          fbb.addOffset(17, totalLeaveDaysOffset);
          fbb.addOffset(18, originalFileOffset);
          fbb.addOffset(19, statusOffset);
          fbb.addOffset(20, statusDescriptionOffset);
          fbb.addInt64(21, object.approverId);
          fbb.addOffset(22, approverNameOffset);
          fbb.addOffset(23, createdAtOffset);
          fbb.addOffset(24, updatedAtOffset);
          fbb.addInt64(25, object.serverId);
          fbb.addOffset(26, fileOffset);
          fbb.finish(fbb.endTable());
          return object.serverId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final userIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final substituteIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final substituteNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final substituteDivisionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final substitutePositionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final namaLengkapParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final leaveDetailIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final descriptionLeaveParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final entryTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final posisiParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final submissionDateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30);
          final startDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final endDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final entryDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 36);
          final totalLeaveDaysParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 38);
          final fileParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 56);
          final originalFileParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 40);
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 42);
          final statusDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 44);
          final approverIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 46);
          final approverNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 48);
          final createdAtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 50);
          final updatedAtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 52);
          final serverIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 54, 0);
          final object = Leaves(
              id: idParam,
              userId: userIdParam,
              substituteId: substituteIdParam,
              substituteName: substituteNameParam,
              substituteDivision: substituteDivisionParam,
              substitutePosition: substitutePositionParam,
              namaLengkap: namaLengkapParam,
              type: typeParam,
              leaveDetailId: leaveDetailIdParam,
              descriptionLeave: descriptionLeaveParam,
              entryTime: entryTimeParam,
              category: categoryParam,
              posisi: posisiParam,
              submissionDate: submissionDateParam,
              startDate: startDateParam,
              endDate: endDateParam,
              entryDate: entryDateParam,
              totalLeaveDays: totalLeaveDaysParam,
              file: fileParam,
              originalFile: originalFileParam,
              status: statusParam,
              statusDescription: statusDescriptionParam,
              approverId: approverIdParam,
              approverName: approverNameParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              serverId: serverIdParam);

          return object;
        }),
    Profile: EntityDefinition<Profile>(
        model: _entities[4],
        toOneRelations: (Profile object) => [],
        toManyRelations: (Profile object) =>
            {RelInfo<Profile>.toMany(2, object.serverId): object.standupFRs},
        getId: (Profile object) => object.serverId,
        setId: (Profile object, int id) {
          object.serverId = id;
        },
        objectToFB: (Profile object, fb.Builder fbb) {
          final namaLengkapOffset = object.namaLengkap == null
              ? null
              : fbb.writeString(object.namaLengkap!);
          final divisiOffset =
              object.divisi == null ? null : fbb.writeString(object.divisi!);
          final posisiOffset =
              object.posisi == null ? null : fbb.writeString(object.posisi!);
          final avatarOffset =
              object.avatar == null ? null : fbb.writeString(object.avatar!);
          final idNumberOffset = object.idNumber == null
              ? null
              : fbb.writeString(object.idNumber!);
          final genderOffset =
              object.gender == null ? null : fbb.writeString(object.gender!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final birthDateOffset = object.birthDate == null
              ? null
              : fbb.writeString(object.birthDate!);
          final permissionOffset = object.permission == null
              ? null
              : fbb.writeList(object.permission!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final emailVerifiedAtOffset = object.emailVerifiedAt == null
              ? null
              : fbb.writeString(object.emailVerifiedAt!);
          final roleOffset =
              object.role == null ? null : fbb.writeString(object.role!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final facepointOffset = object.facepoint == null
              ? null
              : fbb.writeString(object.facepoint!);
          final rememberTokenOffset = object.rememberToken == null
              ? null
              : fbb.writeString(object.rememberToken!);
          final createdAtOffset = object.createdAt == null
              ? null
              : fbb.writeString(object.createdAt!);
          final updatedAtOffset = object.updatedAt == null
              ? null
              : fbb.writeString(object.updatedAt!);
          fbb.startTable(28);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.userId);
          fbb.addOffset(2, namaLengkapOffset);
          fbb.addOffset(3, divisiOffset);
          fbb.addInt64(4, object.divisionId);
          fbb.addOffset(5, posisiOffset);
          fbb.addInt64(6, object.posisitionId);
          fbb.addOffset(7, avatarOffset);
          fbb.addOffset(8, idNumberOffset);
          fbb.addOffset(9, genderOffset);
          fbb.addOffset(10, addressOffset);
          fbb.addOffset(11, birthDateOffset);
          fbb.addInt64(12, object.isActive);
          fbb.addOffset(13, permissionOffset);
          fbb.addOffset(14, nameOffset);
          fbb.addOffset(15, emailOffset);
          fbb.addOffset(16, emailVerifiedAtOffset);
          fbb.addOffset(17, roleOffset);
          fbb.addOffset(18, passwordOffset);
          fbb.addOffset(19, facepointOffset);
          fbb.addOffset(20, rememberTokenOffset);
          fbb.addInt64(21, object.doneCount);
          fbb.addInt64(22, object.doingCount);
          fbb.addInt64(23, object.blockerCount);
          fbb.addOffset(24, createdAtOffset);
          fbb.addOffset(25, updatedAtOffset);
          fbb.addInt64(26, object.serverId);
          fbb.finish(fbb.endTable());
          return object.serverId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final userIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final namaLengkapParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final divisiParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final divisionIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final posisiParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final posisitionIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final avatarParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final idNumberParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final genderParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final birthDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final isActiveParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final permissionParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 30);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final emailVerifiedAtParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 36);
          final roleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 40);
          final facepointParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 42);
          final rememberTokenParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 44);
          final doneCountParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 46);
          final doingCountParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 48);
          final blockerCountParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 50);
          final createdAtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 52);
          final updatedAtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 54);
          final object = Profile(
              id: idParam,
              userId: userIdParam,
              namaLengkap: namaLengkapParam,
              divisi: divisiParam,
              divisionId: divisionIdParam,
              posisi: posisiParam,
              posisitionId: posisitionIdParam,
              avatar: avatarParam,
              idNumber: idNumberParam,
              gender: genderParam,
              address: addressParam,
              birthDate: birthDateParam,
              isActive: isActiveParam,
              permission: permissionParam,
              name: nameParam,
              email: emailParam,
              emailVerifiedAt: emailVerifiedAtParam,
              role: roleParam,
              password: passwordParam,
              facepoint: facepointParam,
              rememberToken: rememberTokenParam,
              doneCount: doneCountParam,
              doingCount: doingCountParam,
              blockerCount: blockerCountParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam)
            ..serverId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 56, 0);
          InternalToManyAccess.setRelInfo<Profile>(object.standupFRs, store,
              RelInfo<Profile>.toMany(2, object.serverId));
          return object;
        }),
    NationalLeaves: EntityDefinition<NationalLeaves>(
        model: _entities[5],
        toOneRelations: (NationalLeaves object) => [],
        toManyRelations: (NationalLeaves object) => {},
        getId: (NationalLeaves object) => object.id,
        setId: (NationalLeaves object, int id) {
          object.id = id;
        },
        objectToFB: (NationalLeaves object, fb.Builder fbb) {
          final holidayDateOffset = object.holidayDate == null
              ? null
              : fbb.writeString(object.holidayDate!);
          final holidayNameOffset = object.holidayName == null
              ? null
              : fbb.writeString(object.holidayName!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, holidayDateOffset);
          fbb.addOffset(2, holidayNameOffset);
          fbb.addBool(3, object.isNationalHoliday);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final holidayDateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6);
          final holidayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final isNationalHolidayParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final object = NationalLeaves(
              holidayDate: holidayDateParam,
              holidayName: holidayNameParam,
              isNationalHoliday: isNationalHolidayParam,
              id: idParam);

          return object;
        }),
    Notifications: EntityDefinition<Notifications>(
        model: _entities[6],
        toOneRelations: (Notifications object) => [],
        toManyRelations: (Notifications object) => {},
        getId: (Notifications object) => object.serverId,
        setId: (Notifications object, int id) {
          object.serverId = id;
        },
        objectToFB: (Notifications object, fb.Builder fbb) {
          final androidAccentColorOffset = object.androidAccentColor == null
              ? null
              : fbb.writeString(object.androidAccentColor!);
          final appIdOffset =
              object.appId == null ? null : fbb.writeString(object.appId!);
          final bigPictureOffset = object.bigPicture == null
              ? null
              : fbb.writeString(object.bigPicture!);
          final delayedOptionOffset = object.delayedOption == null
              ? null
              : fbb.writeString(object.delayedOption!);
          final globalImageOffset = object.globalImage == null
              ? null
              : fbb.writeString(object.globalImage!);
          final includePlayerIdsOffset = object.includePlayerIds == null
              ? null
              : fbb.writeList(object.includePlayerIds!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final largeIconOffset = object.largeIcon == null
              ? null
              : fbb.writeString(object.largeIcon!);
          final smallIconOffset = object.smallIcon == null
              ? null
              : fbb.writeString(object.smallIcon!);
          final tagsOffset =
              object.tags == null ? null : fbb.writeString(object.tags!);
          final filtersOffset =
              object.filters == null ? null : fbb.writeString(object.filters!);
          final templateIdOffset = object.templateId == null
              ? null
              : fbb.writeString(object.templateId!);
          final urlOffset =
              object.url == null ? null : fbb.writeString(object.url!);
          final webUrlOffset =
              object.webUrl == null ? null : fbb.writeString(object.webUrl!);
          final appUrlOffset =
              object.appUrl == null ? null : fbb.writeString(object.appUrl!);
          final includeAliasesOffset = object.includeAliases == null
              ? null
              : fbb.writeString(object.includeAliases!);
          final fcapStatusOffset = object.fcapStatus == null
              ? null
              : fbb.writeString(object.fcapStatus!);
          final smsFromOffset =
              object.smsFrom == null ? null : fbb.writeString(object.smsFrom!);
          final smsMediaUrlsOffset = object.smsMediaUrls == null
              ? null
              : fbb.writeString(object.smsMediaUrls!);
          final subtitleOffset = object.subtitle == null
              ? null
              : fbb.writeString(object.subtitle!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final emailClickTrackingDisabledOffset =
              object.emailClickTrackingDisabled == null
                  ? null
                  : fbb.writeString(object.emailClickTrackingDisabled!);
          final emailSubjectOffset = object.emailSubject == null
              ? null
              : fbb.writeString(object.emailSubject!);
          final emailFromNameOffset = object.emailFromName == null
              ? null
              : fbb.writeString(object.emailFromName!);
          final emailFromAddressOffset = object.emailFromAddress == null
              ? null
              : fbb.writeString(object.emailFromAddress!);
          final emailPreheaderOffset = object.emailPreheader == null
              ? null
              : fbb.writeString(object.emailPreheader!);
          final emailReplyToAddressOffset = object.emailReplyToAddress == null
              ? null
              : fbb.writeString(object.emailReplyToAddress!);
          fbb.startTable(57);
          fbb.addOffset(0, androidAccentColorOffset);
          fbb.addOffset(1, appIdOffset);
          fbb.addOffset(2, bigPictureOffset);
          fbb.addBool(3, object.canceled);
          fbb.addInt64(4, object.converted);
          fbb.addOffset(5, delayedOptionOffset);
          fbb.addInt64(6, object.errored);
          fbb.addInt64(7, object.failed);
          fbb.addOffset(8, globalImageOffset);
          fbb.addInt64(9, object.id);
          fbb.addOffset(10, includePlayerIdsOffset);
          fbb.addBool(11, object.isAdm);
          fbb.addBool(12, object.isAndroid);
          fbb.addBool(13, object.isChrome);
          fbb.addBool(14, object.isChromeWeb);
          fbb.addBool(15, object.isAlexa);
          fbb.addBool(16, object.isFirefox);
          fbb.addBool(17, object.isIos);
          fbb.addBool(18, object.isSafari);
          fbb.addBool(19, object.isWP);
          fbb.addBool(20, object.isWPWNS);
          fbb.addBool(21, object.isEdge);
          fbb.addBool(22, object.isHuawei);
          fbb.addBool(23, object.isSMS);
          fbb.addOffset(24, largeIconOffset);
          fbb.addInt64(25, object.priority);
          fbb.addInt64(26, object.queuedAt);
          fbb.addInt64(27, object.remaining);
          fbb.addInt64(28, object.sendAfter);
          fbb.addInt64(29, object.completedAt);
          fbb.addOffset(30, smallIconOffset);
          fbb.addInt64(31, object.successful);
          fbb.addOffset(32, tagsOffset);
          fbb.addOffset(33, filtersOffset);
          fbb.addOffset(34, templateIdOffset);
          fbb.addInt64(35, object.ttl);
          fbb.addOffset(36, urlOffset);
          fbb.addOffset(37, webUrlOffset);
          fbb.addOffset(38, appUrlOffset);
          fbb.addInt64(39, object.includeExternalUserIds);
          fbb.addOffset(40, includeAliasesOffset);
          fbb.addOffset(41, fcapStatusOffset);
          fbb.addOffset(42, smsFromOffset);
          fbb.addOffset(43, smsMediaUrlsOffset);
          fbb.addOffset(44, subtitleOffset);
          fbb.addOffset(45, nameOffset);
          fbb.addOffset(46, emailClickTrackingDisabledOffset);
          fbb.addBool(47, object.isEmail);
          fbb.addOffset(48, emailSubjectOffset);
          fbb.addOffset(49, emailFromNameOffset);
          fbb.addOffset(50, emailFromAddressOffset);
          fbb.addOffset(51, emailPreheaderOffset);
          fbb.addOffset(52, emailReplyToAddressOffset);
          fbb.addBool(53, object.includeUnsubscribed);
          fbb.addInt64(54, object.threadId);
          fbb.addInt64(55, object.serverId);
          fbb.finish(fbb.endTable());
          return object.serverId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final androidAccentColorParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 4);
          final appIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final bigPictureParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final canceledParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10);
          final convertedParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final delayedOptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final erroredParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final failedParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final globalImageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final includePlayerIdsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 24);
          final includeExternalUserIdsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 82);
          final includeAliasesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 84);
          final threadIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 112);
          final isAdmParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final isAndroidParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 28);
          final isChromeParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 30);
          final isChromeWebParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32);
          final isAlexaParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34);
          final isFirefoxParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36);
          final isIosParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 38);
          final isSafariParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 40);
          final isWPParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 42);
          final isWPWNSParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 44);
          final isEdgeParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 46);
          final isHuaweiParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 48);
          final isSMSParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 50);
          final largeIconParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 52);
          final priorityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 54);
          final queuedAtParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 56);
          final remainingParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 58);
          final sendAfterParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 60);
          final completedAtParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 62);
          final smallIconParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 64);
          final successfulParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 66);
          final tagsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 68);
          final filtersParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 70);
          final templateIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 72);
          final ttlParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 74);
          final urlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 76);
          final webUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 78);
          final appUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 80);
          final fcapStatusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 86);
          final smsFromParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 88);
          final smsMediaUrlsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 90);
          final subtitleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 92);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 94);
          final emailClickTrackingDisabledParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 96);
          final isEmailParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 98);
          final emailSubjectParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 100);
          final emailFromNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 102);
          final emailFromAddressParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 104);
          final emailPreheaderParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 106);
          final emailReplyToAddressParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 108);
          final includeUnsubscribedParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 110);
          final serverIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 114, 0);
          final object = Notifications(
              androidAccentColor: androidAccentColorParam,
              appId: appIdParam,
              bigPicture: bigPictureParam,
              canceled: canceledParam,
              converted: convertedParam,
              delayedOption: delayedOptionParam,
              errored: erroredParam,
              failed: failedParam,
              globalImage: globalImageParam,
              id: idParam,
              includePlayerIds: includePlayerIdsParam,
              includeExternalUserIds: includeExternalUserIdsParam,
              includeAliases: includeAliasesParam,
              threadId: threadIdParam,
              isAdm: isAdmParam,
              isAndroid: isAndroidParam,
              isChrome: isChromeParam,
              isChromeWeb: isChromeWebParam,
              isAlexa: isAlexaParam,
              isFirefox: isFirefoxParam,
              isIos: isIosParam,
              isSafari: isSafariParam,
              isWP: isWPParam,
              isWPWNS: isWPWNSParam,
              isEdge: isEdgeParam,
              isHuawei: isHuaweiParam,
              isSMS: isSMSParam,
              largeIcon: largeIconParam,
              priority: priorityParam,
              queuedAt: queuedAtParam,
              remaining: remainingParam,
              sendAfter: sendAfterParam,
              completedAt: completedAtParam,
              smallIcon: smallIconParam,
              successful: successfulParam,
              tags: tagsParam,
              filters: filtersParam,
              templateId: templateIdParam,
              ttl: ttlParam,
              url: urlParam,
              webUrl: webUrlParam,
              appUrl: appUrlParam,
              fcapStatus: fcapStatusParam,
              smsFrom: smsFromParam,
              smsMediaUrls: smsMediaUrlsParam,
              subtitle: subtitleParam,
              name: nameParam,
              emailClickTrackingDisabled: emailClickTrackingDisabledParam,
              isEmail: isEmailParam,
              emailSubject: emailSubjectParam,
              emailFromName: emailFromNameParam,
              emailFromAddress: emailFromAddressParam,
              emailPreheader: emailPreheaderParam,
              emailReplyToAddress: emailReplyToAddressParam,
              includeUnsubscribed: includeUnsubscribedParam,
              serverId: serverIdParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Projects] entity fields to define ObjectBox queries.
class Projects_ {
  /// see [Projects.id]
  static final id = QueryIntegerProperty<Projects>(_entities[0].properties[0]);

  /// see [Projects.partnerId]
  static final partnerId =
      QueryIntegerProperty<Projects>(_entities[0].properties[1]);

  /// see [Projects.project]
  static final project =
      QueryStringProperty<Projects>(_entities[0].properties[2]);

  /// see [Projects.partner]
  static final partner =
      QueryStringProperty<Projects>(_entities[0].properties[3]);

  /// see [Projects.partnerLogo]
  static final partnerLogo =
      QueryStringProperty<Projects>(_entities[0].properties[4]);

  /// see [Projects.partnerDescription]
  static final partnerDescription =
      QueryStringProperty<Projects>(_entities[0].properties[5]);

  /// see [Projects.startDate]
  static final startDate =
      QueryStringProperty<Projects>(_entities[0].properties[6]);

  /// see [Projects.endDate]
  static final endDate =
      QueryStringProperty<Projects>(_entities[0].properties[7]);

  /// see [Projects.durasi]
  static final durasi =
      QueryIntegerProperty<Projects>(_entities[0].properties[8]);

  /// see [Projects.status]
  static final status =
      QueryStringProperty<Projects>(_entities[0].properties[9]);

  /// see [Projects.createdAt]
  static final createdAt =
      QueryStringProperty<Projects>(_entities[0].properties[10]);

  /// see [Projects.updatedAt]
  static final updatedAt =
      QueryStringProperty<Projects>(_entities[0].properties[11]);

  /// see [Projects.serverId]
  static final serverId =
      QueryIntegerProperty<Projects>(_entities[0].properties[12]);
}

/// [Presences] entity fields to define ObjectBox queries.
class Presences_ {
  /// see [Presences.id]
  static final id = QueryIntegerProperty<Presences>(_entities[1].properties[0]);

  /// see [Presences.userId]
  static final userId =
      QueryIntegerProperty<Presences>(_entities[1].properties[1]);

  /// see [Presences.namaLengkap]
  static final namaLengkap =
      QueryStringProperty<Presences>(_entities[1].properties[2]);

  /// see [Presences.posisi]
  static final posisi =
      QueryStringProperty<Presences>(_entities[1].properties[3]);

  /// see [Presences.permission]
  static final permission =
      QueryStringVectorProperty<Presences>(_entities[1].properties[4]);

  /// see [Presences.category]
  static final category =
      QueryStringProperty<Presences>(_entities[1].properties[5]);

  /// see [Presences.entryTime]
  static final entryTime =
      QueryStringProperty<Presences>(_entities[1].properties[6]);

  /// see [Presences.exitTime]
  static final exitTime =
      QueryStringProperty<Presences>(_entities[1].properties[7]);

  /// see [Presences.date]
  static final date =
      QueryStringProperty<Presences>(_entities[1].properties[8]);

  /// see [Presences.latitude]
  static final latitude =
      QueryStringProperty<Presences>(_entities[1].properties[9]);

  /// see [Presences.longitude]
  static final longitude =
      QueryStringProperty<Presences>(_entities[1].properties[10]);

  /// see [Presences.emergencyDescription]
  static final emergencyDescription =
      QueryStringProperty<Presences>(_entities[1].properties[11]);

  /// see [Presences.createdAt]
  static final createdAt =
      QueryStringProperty<Presences>(_entities[1].properties[12]);

  /// see [Presences.updatedAt]
  static final updatedAt =
      QueryStringProperty<Presences>(_entities[1].properties[13]);

  /// see [Presences.file]
  static final file =
      QueryStringProperty<Presences>(_entities[1].properties[14]);

  /// see [Presences.originalFile]
  static final originalFile =
      QueryStringProperty<Presences>(_entities[1].properties[15]);

  /// see [Presences.startDate]
  static final startDate =
      QueryStringProperty<Presences>(_entities[1].properties[16]);

  /// see [Presences.endDate]
  static final endDate =
      QueryStringProperty<Presences>(_entities[1].properties[17]);

  /// see [Presences.entryDate]
  static final entryDate =
      QueryStringProperty<Presences>(_entities[1].properties[18]);

  /// see [Presences.facePoint]
  static final facePoint =
      QueryStringProperty<Presences>(_entities[1].properties[19]);

  /// see [Presences.statusCommitId]
  static final statusCommitId =
      QueryIntegerProperty<Presences>(_entities[1].properties[20]);

  /// see [Presences.status]
  static final status =
      QueryStringProperty<Presences>(_entities[1].properties[21]);

  /// see [Presences.statusDescription]
  static final statusDescription =
      QueryStringProperty<Presences>(_entities[1].properties[22]);

  /// see [Presences.categoryDescription]
  static final categoryDescription =
      QueryStringProperty<Presences>(_entities[1].properties[23]);

  /// see [Presences.teleworkCategory]
  static final teleworkCategory =
      QueryStringProperty<Presences>(_entities[1].properties[24]);

  /// see [Presences.type]
  static final type =
      QueryStringProperty<Presences>(_entities[1].properties[25]);

  /// see [Presences.descriptionLeave]
  static final descriptionLeave =
      QueryStringProperty<Presences>(_entities[1].properties[26]);

  /// see [Presences.submissionDate]
  static final submissionDate =
      QueryStringProperty<Presences>(_entities[1].properties[27]);

  /// see [Presences.totalLeaveDays]
  static final totalLeaveDays =
      QueryStringProperty<Presences>(_entities[1].properties[28]);

  /// see [Presences.substituteId]
  static final substituteId =
      QueryIntegerProperty<Presences>(_entities[1].properties[29]);

  /// see [Presences.substituteName]
  static final substituteName =
      QueryStringProperty<Presences>(_entities[1].properties[30]);

  /// see [Presences.substituteDivision]
  static final substituteDivision =
      QueryStringProperty<Presences>(_entities[1].properties[31]);

  /// see [Presences.substitutePosition]
  static final substitutePosition =
      QueryStringProperty<Presences>(_entities[1].properties[32]);

  /// see [Presences.serverId]
  static final serverId =
      QueryIntegerProperty<Presences>(_entities[1].properties[33]);

  /// see [Presences.standupFR]
  static final standupFR =
      QueryRelationToMany<Presences, StandUps>(_entities[1].relations[0]);
}

/// [StandUps] entity fields to define ObjectBox queries.
class StandUps_ {
  /// see [StandUps.id]
  static final id = QueryIntegerProperty<StandUps>(_entities[2].properties[0]);

  /// see [StandUps.userId]
  static final userId =
      QueryIntegerProperty<StandUps>(_entities[2].properties[1]);

  /// see [StandUps.namaLengkap]
  static final namaLengkap =
      QueryStringProperty<StandUps>(_entities[2].properties[2]);

  /// see [StandUps.prensenceId]
  static final prensenceId =
      QueryIntegerProperty<StandUps>(_entities[2].properties[3]);

  /// see [StandUps.prensenceCategory]
  static final prensenceCategory =
      QueryStringProperty<StandUps>(_entities[2].properties[4]);

  /// see [StandUps.projectId]
  static final projectId =
      QueryIntegerProperty<StandUps>(_entities[2].properties[5]);

  /// see [StandUps.project]
  static final project =
      QueryStringProperty<StandUps>(_entities[2].properties[6]);

  /// see [StandUps.partner]
  static final partner =
      QueryStringProperty<StandUps>(_entities[2].properties[7]);

  /// see [StandUps.done]
  static final done = QueryStringProperty<StandUps>(_entities[2].properties[8]);

  /// see [StandUps.doing]
  static final doing =
      QueryStringProperty<StandUps>(_entities[2].properties[9]);

  /// see [StandUps.jam]
  static final jam = QueryStringProperty<StandUps>(_entities[2].properties[10]);

  /// see [StandUps.blocker]
  static final blocker =
      QueryStringProperty<StandUps>(_entities[2].properties[11]);

  /// see [StandUps.createdAt]
  static final createdAt =
      QueryStringProperty<StandUps>(_entities[2].properties[12]);

  /// see [StandUps.updatedAt]
  static final updatedAt =
      QueryStringProperty<StandUps>(_entities[2].properties[13]);

  /// see [StandUps.presenceFR]
  static final presenceFR =
      QueryRelationToOne<StandUps, Presences>(_entities[2].properties[14]);

  /// see [StandUps.serverId]
  static final serverId =
      QueryIntegerProperty<StandUps>(_entities[2].properties[15]);
}

/// [Leaves] entity fields to define ObjectBox queries.
class Leaves_ {
  /// see [Leaves.id]
  static final id = QueryIntegerProperty<Leaves>(_entities[3].properties[0]);

  /// see [Leaves.userId]
  static final userId =
      QueryIntegerProperty<Leaves>(_entities[3].properties[1]);

  /// see [Leaves.substituteId]
  static final substituteId =
      QueryIntegerProperty<Leaves>(_entities[3].properties[2]);

  /// see [Leaves.substituteName]
  static final substituteName =
      QueryStringProperty<Leaves>(_entities[3].properties[3]);

  /// see [Leaves.substituteDivision]
  static final substituteDivision =
      QueryStringProperty<Leaves>(_entities[3].properties[4]);

  /// see [Leaves.substitutePosition]
  static final substitutePosition =
      QueryStringProperty<Leaves>(_entities[3].properties[5]);

  /// see [Leaves.namaLengkap]
  static final namaLengkap =
      QueryStringProperty<Leaves>(_entities[3].properties[6]);

  /// see [Leaves.type]
  static final type = QueryStringProperty<Leaves>(_entities[3].properties[7]);

  /// see [Leaves.leaveDetailId]
  static final leaveDetailId =
      QueryIntegerProperty<Leaves>(_entities[3].properties[8]);

  /// see [Leaves.descriptionLeave]
  static final descriptionLeave =
      QueryStringProperty<Leaves>(_entities[3].properties[9]);

  /// see [Leaves.entryTime]
  static final entryTime =
      QueryStringProperty<Leaves>(_entities[3].properties[10]);

  /// see [Leaves.category]
  static final category =
      QueryStringProperty<Leaves>(_entities[3].properties[11]);

  /// see [Leaves.posisi]
  static final posisi =
      QueryStringProperty<Leaves>(_entities[3].properties[12]);

  /// see [Leaves.submissionDate]
  static final submissionDate =
      QueryStringProperty<Leaves>(_entities[3].properties[13]);

  /// see [Leaves.startDate]
  static final startDate =
      QueryStringProperty<Leaves>(_entities[3].properties[14]);

  /// see [Leaves.endDate]
  static final endDate =
      QueryStringProperty<Leaves>(_entities[3].properties[15]);

  /// see [Leaves.entryDate]
  static final entryDate =
      QueryStringProperty<Leaves>(_entities[3].properties[16]);

  /// see [Leaves.totalLeaveDays]
  static final totalLeaveDays =
      QueryStringProperty<Leaves>(_entities[3].properties[17]);

  /// see [Leaves.originalFile]
  static final originalFile =
      QueryStringProperty<Leaves>(_entities[3].properties[18]);

  /// see [Leaves.status]
  static final status =
      QueryStringProperty<Leaves>(_entities[3].properties[19]);

  /// see [Leaves.statusDescription]
  static final statusDescription =
      QueryStringProperty<Leaves>(_entities[3].properties[20]);

  /// see [Leaves.approverId]
  static final approverId =
      QueryIntegerProperty<Leaves>(_entities[3].properties[21]);

  /// see [Leaves.approverName]
  static final approverName =
      QueryStringProperty<Leaves>(_entities[3].properties[22]);

  /// see [Leaves.createdAt]
  static final createdAt =
      QueryStringProperty<Leaves>(_entities[3].properties[23]);

  /// see [Leaves.updatedAt]
  static final updatedAt =
      QueryStringProperty<Leaves>(_entities[3].properties[24]);

  /// see [Leaves.serverId]
  static final serverId =
      QueryIntegerProperty<Leaves>(_entities[3].properties[25]);

  /// see [Leaves.file]
  static final file = QueryStringProperty<Leaves>(_entities[3].properties[26]);
}

/// [Profile] entity fields to define ObjectBox queries.
class Profile_ {
  /// see [Profile.id]
  static final id = QueryIntegerProperty<Profile>(_entities[4].properties[0]);

  /// see [Profile.userId]
  static final userId =
      QueryIntegerProperty<Profile>(_entities[4].properties[1]);

  /// see [Profile.namaLengkap]
  static final namaLengkap =
      QueryStringProperty<Profile>(_entities[4].properties[2]);

  /// see [Profile.divisi]
  static final divisi =
      QueryStringProperty<Profile>(_entities[4].properties[3]);

  /// see [Profile.divisionId]
  static final divisionId =
      QueryIntegerProperty<Profile>(_entities[4].properties[4]);

  /// see [Profile.posisi]
  static final posisi =
      QueryStringProperty<Profile>(_entities[4].properties[5]);

  /// see [Profile.posisitionId]
  static final posisitionId =
      QueryIntegerProperty<Profile>(_entities[4].properties[6]);

  /// see [Profile.avatar]
  static final avatar =
      QueryStringProperty<Profile>(_entities[4].properties[7]);

  /// see [Profile.idNumber]
  static final idNumber =
      QueryStringProperty<Profile>(_entities[4].properties[8]);

  /// see [Profile.gender]
  static final gender =
      QueryStringProperty<Profile>(_entities[4].properties[9]);

  /// see [Profile.address]
  static final address =
      QueryStringProperty<Profile>(_entities[4].properties[10]);

  /// see [Profile.birthDate]
  static final birthDate =
      QueryStringProperty<Profile>(_entities[4].properties[11]);

  /// see [Profile.isActive]
  static final isActive =
      QueryIntegerProperty<Profile>(_entities[4].properties[12]);

  /// see [Profile.permission]
  static final permission =
      QueryStringVectorProperty<Profile>(_entities[4].properties[13]);

  /// see [Profile.name]
  static final name = QueryStringProperty<Profile>(_entities[4].properties[14]);

  /// see [Profile.email]
  static final email =
      QueryStringProperty<Profile>(_entities[4].properties[15]);

  /// see [Profile.emailVerifiedAt]
  static final emailVerifiedAt =
      QueryStringProperty<Profile>(_entities[4].properties[16]);

  /// see [Profile.role]
  static final role = QueryStringProperty<Profile>(_entities[4].properties[17]);

  /// see [Profile.password]
  static final password =
      QueryStringProperty<Profile>(_entities[4].properties[18]);

  /// see [Profile.facepoint]
  static final facepoint =
      QueryStringProperty<Profile>(_entities[4].properties[19]);

  /// see [Profile.rememberToken]
  static final rememberToken =
      QueryStringProperty<Profile>(_entities[4].properties[20]);

  /// see [Profile.doneCount]
  static final doneCount =
      QueryIntegerProperty<Profile>(_entities[4].properties[21]);

  /// see [Profile.doingCount]
  static final doingCount =
      QueryIntegerProperty<Profile>(_entities[4].properties[22]);

  /// see [Profile.blockerCount]
  static final blockerCount =
      QueryIntegerProperty<Profile>(_entities[4].properties[23]);

  /// see [Profile.createdAt]
  static final createdAt =
      QueryStringProperty<Profile>(_entities[4].properties[24]);

  /// see [Profile.updatedAt]
  static final updatedAt =
      QueryStringProperty<Profile>(_entities[4].properties[25]);

  /// see [Profile.serverId]
  static final serverId =
      QueryIntegerProperty<Profile>(_entities[4].properties[26]);

  /// see [Profile.standupFRs]
  static final standupFRs =
      QueryRelationToMany<Profile, StandUps>(_entities[4].relations[0]);
}

/// [NationalLeaves] entity fields to define ObjectBox queries.
class NationalLeaves_ {
  /// see [NationalLeaves.id]
  static final id =
      QueryIntegerProperty<NationalLeaves>(_entities[5].properties[0]);

  /// see [NationalLeaves.holidayDate]
  static final holidayDate =
      QueryStringProperty<NationalLeaves>(_entities[5].properties[1]);

  /// see [NationalLeaves.holidayName]
  static final holidayName =
      QueryStringProperty<NationalLeaves>(_entities[5].properties[2]);

  /// see [NationalLeaves.isNationalHoliday]
  static final isNationalHoliday =
      QueryBooleanProperty<NationalLeaves>(_entities[5].properties[3]);
}

/// [Notifications] entity fields to define ObjectBox queries.
class Notifications_ {
  /// see [Notifications.androidAccentColor]
  static final androidAccentColor =
      QueryStringProperty<Notifications>(_entities[6].properties[0]);

  /// see [Notifications.appId]
  static final appId =
      QueryStringProperty<Notifications>(_entities[6].properties[1]);

  /// see [Notifications.bigPicture]
  static final bigPicture =
      QueryStringProperty<Notifications>(_entities[6].properties[2]);

  /// see [Notifications.canceled]
  static final canceled =
      QueryBooleanProperty<Notifications>(_entities[6].properties[3]);

  /// see [Notifications.converted]
  static final converted =
      QueryIntegerProperty<Notifications>(_entities[6].properties[4]);

  /// see [Notifications.delayedOption]
  static final delayedOption =
      QueryStringProperty<Notifications>(_entities[6].properties[5]);

  /// see [Notifications.errored]
  static final errored =
      QueryIntegerProperty<Notifications>(_entities[6].properties[6]);

  /// see [Notifications.failed]
  static final failed =
      QueryIntegerProperty<Notifications>(_entities[6].properties[7]);

  /// see [Notifications.globalImage]
  static final globalImage =
      QueryStringProperty<Notifications>(_entities[6].properties[8]);

  /// see [Notifications.id]
  static final id =
      QueryIntegerProperty<Notifications>(_entities[6].properties[9]);

  /// see [Notifications.includePlayerIds]
  static final includePlayerIds =
      QueryStringVectorProperty<Notifications>(_entities[6].properties[10]);

  /// see [Notifications.isAdm]
  static final isAdm =
      QueryBooleanProperty<Notifications>(_entities[6].properties[11]);

  /// see [Notifications.isAndroid]
  static final isAndroid =
      QueryBooleanProperty<Notifications>(_entities[6].properties[12]);

  /// see [Notifications.isChrome]
  static final isChrome =
      QueryBooleanProperty<Notifications>(_entities[6].properties[13]);

  /// see [Notifications.isChromeWeb]
  static final isChromeWeb =
      QueryBooleanProperty<Notifications>(_entities[6].properties[14]);

  /// see [Notifications.isAlexa]
  static final isAlexa =
      QueryBooleanProperty<Notifications>(_entities[6].properties[15]);

  /// see [Notifications.isFirefox]
  static final isFirefox =
      QueryBooleanProperty<Notifications>(_entities[6].properties[16]);

  /// see [Notifications.isIos]
  static final isIos =
      QueryBooleanProperty<Notifications>(_entities[6].properties[17]);

  /// see [Notifications.isSafari]
  static final isSafari =
      QueryBooleanProperty<Notifications>(_entities[6].properties[18]);

  /// see [Notifications.isWP]
  static final isWP =
      QueryBooleanProperty<Notifications>(_entities[6].properties[19]);

  /// see [Notifications.isWPWNS]
  static final isWPWNS =
      QueryBooleanProperty<Notifications>(_entities[6].properties[20]);

  /// see [Notifications.isEdge]
  static final isEdge =
      QueryBooleanProperty<Notifications>(_entities[6].properties[21]);

  /// see [Notifications.isHuawei]
  static final isHuawei =
      QueryBooleanProperty<Notifications>(_entities[6].properties[22]);

  /// see [Notifications.isSMS]
  static final isSMS =
      QueryBooleanProperty<Notifications>(_entities[6].properties[23]);

  /// see [Notifications.largeIcon]
  static final largeIcon =
      QueryStringProperty<Notifications>(_entities[6].properties[24]);

  /// see [Notifications.priority]
  static final priority =
      QueryIntegerProperty<Notifications>(_entities[6].properties[25]);

  /// see [Notifications.queuedAt]
  static final queuedAt =
      QueryIntegerProperty<Notifications>(_entities[6].properties[26]);

  /// see [Notifications.remaining]
  static final remaining =
      QueryIntegerProperty<Notifications>(_entities[6].properties[27]);

  /// see [Notifications.sendAfter]
  static final sendAfter =
      QueryIntegerProperty<Notifications>(_entities[6].properties[28]);

  /// see [Notifications.completedAt]
  static final completedAt =
      QueryIntegerProperty<Notifications>(_entities[6].properties[29]);

  /// see [Notifications.smallIcon]
  static final smallIcon =
      QueryStringProperty<Notifications>(_entities[6].properties[30]);

  /// see [Notifications.successful]
  static final successful =
      QueryIntegerProperty<Notifications>(_entities[6].properties[31]);

  /// see [Notifications.tags]
  static final tags =
      QueryStringProperty<Notifications>(_entities[6].properties[32]);

  /// see [Notifications.filters]
  static final filters =
      QueryStringProperty<Notifications>(_entities[6].properties[33]);

  /// see [Notifications.templateId]
  static final templateId =
      QueryStringProperty<Notifications>(_entities[6].properties[34]);

  /// see [Notifications.ttl]
  static final ttl =
      QueryIntegerProperty<Notifications>(_entities[6].properties[35]);

  /// see [Notifications.url]
  static final url =
      QueryStringProperty<Notifications>(_entities[6].properties[36]);

  /// see [Notifications.webUrl]
  static final webUrl =
      QueryStringProperty<Notifications>(_entities[6].properties[37]);

  /// see [Notifications.appUrl]
  static final appUrl =
      QueryStringProperty<Notifications>(_entities[6].properties[38]);

  /// see [Notifications.includeExternalUserIds]
  static final includeExternalUserIds =
      QueryIntegerProperty<Notifications>(_entities[6].properties[39]);

  /// see [Notifications.includeAliases]
  static final includeAliases =
      QueryStringProperty<Notifications>(_entities[6].properties[40]);

  /// see [Notifications.fcapStatus]
  static final fcapStatus =
      QueryStringProperty<Notifications>(_entities[6].properties[41]);

  /// see [Notifications.smsFrom]
  static final smsFrom =
      QueryStringProperty<Notifications>(_entities[6].properties[42]);

  /// see [Notifications.smsMediaUrls]
  static final smsMediaUrls =
      QueryStringProperty<Notifications>(_entities[6].properties[43]);

  /// see [Notifications.subtitle]
  static final subtitle =
      QueryStringProperty<Notifications>(_entities[6].properties[44]);

  /// see [Notifications.name]
  static final name =
      QueryStringProperty<Notifications>(_entities[6].properties[45]);

  /// see [Notifications.emailClickTrackingDisabled]
  static final emailClickTrackingDisabled =
      QueryStringProperty<Notifications>(_entities[6].properties[46]);

  /// see [Notifications.isEmail]
  static final isEmail =
      QueryBooleanProperty<Notifications>(_entities[6].properties[47]);

  /// see [Notifications.emailSubject]
  static final emailSubject =
      QueryStringProperty<Notifications>(_entities[6].properties[48]);

  /// see [Notifications.emailFromName]
  static final emailFromName =
      QueryStringProperty<Notifications>(_entities[6].properties[49]);

  /// see [Notifications.emailFromAddress]
  static final emailFromAddress =
      QueryStringProperty<Notifications>(_entities[6].properties[50]);

  /// see [Notifications.emailPreheader]
  static final emailPreheader =
      QueryStringProperty<Notifications>(_entities[6].properties[51]);

  /// see [Notifications.emailReplyToAddress]
  static final emailReplyToAddress =
      QueryStringProperty<Notifications>(_entities[6].properties[52]);

  /// see [Notifications.includeUnsubscribed]
  static final includeUnsubscribed =
      QueryBooleanProperty<Notifications>(_entities[6].properties[53]);

  /// see [Notifications.threadId]
  static final threadId =
      QueryIntegerProperty<Notifications>(_entities[6].properties[54]);

  /// see [Notifications.serverId]
  static final serverId =
      QueryIntegerProperty<Notifications>(_entities[6].properties[55]);
}
